import { useState, useEffect } from "react";

const YOUTUBE_PLAYER_API_URL = "https://www.youtube.com/player_api";

export default function useYoutubeCaption(videoUrl) {
  const [transcription, setTranscription] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let player;

    // Load the YouTube player API
    const script = document.createElement("script");
    script.src = YOUTUBE_PLAYER_API_URL;
    document.head.appendChild(script);

    // Define the callback function to be called when the API is ready
    window.onYouTubeIframeAPIReady = () => {
      try {
        // Get the video ID from the URL
        const videoId = getVideoId(videoUrl);

        // Create a new YouTube player
        player = new YT.Player("player", {
          videoId,
          events: {
            onReady: async () => {
              try {
                // Get the automatic caption track
                const automaticTrack = getAutomaticCaptionTrack(player);

                if (automaticTrack) {
                  // Get the captions from the automatic track
                  const captions = await getCaptions(automaticTrack);

                  // Set the transcription state
                  setTranscription(captions);

                  // Hide the error message (if any)
                  setError(null);
                } else {
                  setError("This video does not have automatic captions.");
                }
              } catch (error) {
                console.error(error);
                setError("Error retrieving captions.");
              } finally {
                setIsLoading(false);
              }
            },
          },
        });
      } catch (error) {
        console.error(error);
        setError("Error loading YouTube player.");
        setIsLoading(false);
      }
    };

    return () => {
      // Clean up the YouTube player and API script when the component is unmounted
      player?.destroy();
      document.head.removeChild(script);
      delete window.onYouTubeIframeAPIReady;
    };
  }, [videoUrl]);

  return { transcription, isLoading, error };
}

function getVideoId(url) {
  const regex = /[?&]v=([^&]+)/;
  const match = url.match(regex);
  return match?.[1] ?? null;
}

function getAutomaticCaptionTrack(player) {
  const tracks = player.getOption("captions", "tracklist");
  return tracks.find((track) => track.isAutoGenerated);
}

function getCaptions(track) {
  return new Promise((resolve, reject) => {
    track.fetch((track, success, failure) => {
      if (success) {
        resolve(track);
      } else {
        reject(failure);
      }
    });
  });
}
